// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

/**
 * @title Life++ Token
 * @dev Implementation of the Life++ Token with security features and governance support
 */
contract LifePlusPlusToken is ERC20, ERC20Burnable, Pausable, AccessControl, ReentrancyGuard {
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    bytes32 public constant GOVERNANCE_ROLE = keccak256("GOVERNANCE_ROLE");
    
    // Cross-chain bridge contract address
    address public bridgeContract;
    
    // Governance parameters
    uint256 public proposalThreshold;     // Minimum tokens required to create a proposal
    uint256 public quorumThreshold;       // Minimum participation required for a valid vote
    uint256 public votingPeriod;          // Duration of voting period in blocks
    
    // Anti-quantum security parameters
    uint256 public securityLevel;
    
    // Mapping for account security level
    mapping(address => uint8) public accountSecurityLevel;
    
    // Events
    event BridgeContractUpdated(address indexed oldBridge, address indexed newBridge);
    event SecurityLevelUpdated(uint256 oldLevel, uint256 newLevel);
    event AccountSecurityLevelUpdated(address indexed account, uint8 level);
    event GovernanceParametersUpdated(uint256 proposalThreshold, uint256 quorumThreshold, uint256 votingPeriod);
    
    /**
     * @dev Constructor initializes the token with name, symbol and roles
     * @param initialSupply The initial token supply to mint
     * @param initialGovernanceAddress The address to receive governance role
     */
    constructor(
        uint256 initialSupply,
        address initialGovernanceAddress
    ) ERC20("Life++ Token", "LIFE") {
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _grantRole(MINTER_ROLE, msg.sender);
        _grantRole(PAUSER_ROLE, msg.sender);
        _grantRole(GOVERNANCE_ROLE, initialGovernanceAddress);
        
        // Set initial governance parameters
        proposalThreshold = 100000 * 10**decimals();
        quorumThreshold = 1000000 * 10**decimals();
        votingPeriod = 40320; // ~7 days at 15s blocks
        
        // Set initial security level
        securityLevel = 1;
        
        // Mint initial supply
        _mint(msg.sender, initialSupply);
    }
    
    /**
     * @dev Updates the bridge contract address
     * @param newBridgeContract The new bridge contract address
     */
    function setBridgeContract(address newBridgeContract) public onlyRole(DEFAULT_ADMIN_ROLE) {
        require(newBridgeContract != address(0), "Invalid bridge address");
        address oldBridge = bridgeContract;
        bridgeContract = newBridgeContract;
        emit BridgeContractUpdated(oldBridge, newBridgeContract);
    }
    
    /**
     * @dev Updates the security level for quantum resistance
     * @param newLevel The new security level
     */
    function setSecurityLevel(uint256 newLevel) public onlyRole(DEFAULT_ADMIN_ROLE) {
        require(newLevel > 0, "Security level must be positive");
        uint256 oldLevel = securityLevel;
        securityLevel = newLevel;
        emit SecurityLevelUpdated(oldLevel, newLevel);
    }
    
    /**
     * @dev Sets security level for a specific account
     * @param account The account address
     * @param level The security level (1-5)
     */
    function setAccountSecurityLevel(address account, uint8 level) public onlyRole(DEFAULT_ADMIN_ROLE) {
        require(level > 0 && level <= 5, "Level must be between 1 and 5");
        accountSecurityLevel[account] = level;
        emit AccountSecurityLevelUpdated(account, level);
    }
    
    /**
     * @dev Updates governance parameters
     * @param newProposalThreshold New threshold to create a proposal
     * @param newQuorumThreshold New threshold for vote quorum
     * @param newVotingPeriod New voting period duration in blocks
     */
    function setGovernanceParameters(
        uint256 newProposalThreshold,
        uint256 newQuorumThreshold,
        uint256 newVotingPeriod
    ) public onlyRole(GOVERNANCE_ROLE) {
        require(newProposalThreshold > 0, "Proposal threshold must be positive");
        require(newQuorumThreshold > 0, "Quorum threshold must be positive");
        require(newVotingPeriod > 0, "Voting period must be positive");
        
        proposalThreshold = newProposalThreshold;
        quorumThreshold = newQuorumThreshold;
        votingPeriod = newVotingPeriod;
        
        emit GovernanceParametersUpdated(newProposalThreshold, newQuorumThreshold, newVotingPeriod);
    }
    
    /**
     * @dev Mints new tokens
     * @param to Recipient of the tokens
     * @param amount Amount to mint
     */
    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {
        _mint(to, amount);
    }
    
    /**
     * @dev Pauses token transfers
     */
    function pause() public onlyRole(PAUSER_ROLE) {
        _pause();
    }
    
    /**
     * @dev Unpauses token transfers
     */
    function unpause() public onlyRole(PAUSER_ROLE) {
        _unpause();
    }
    
    /**
     * @dev Lock tokens for cross-chain transfer
     * @param amount Amount to lock
     * @param targetChainId Target chain identifier
     * @param recipient Recipient address on target chain
     */
    function lockForBridge(uint256 amount, uint256 targetChainId, bytes memory recipient) 
        public 
        nonReentrant
        whenNotPaused
        returns (bool) 
    {
        require(bridgeContract != address(0), "Bridge not configured");
        require(amount > 0, "Amount must be positive");
        
        // Transfer tokens to the bridge contract
        _transfer(msg.sender, bridgeContract, amount);
        
        // Bridge contract will handle the cross-chain logic
        // This would typically involve calling a function on the bridge contract
        // For now, we just emit an event for simplicity
        emit Transfer(msg.sender, bridgeContract, amount);
        
        return true;
    }
    
    /**
     * @dev Receive tokens from a cross-chain transfer
     * @param to Recipient address
     * @param amount Amount to receive
     * @param sourceChainId Source chain identifier
     */
    function receiveFromBridge(address to, uint256 amount, uint256 sourceChainId) 
        public 
        nonReentrant
        returns (bool) 
    {
        require(msg.sender == bridgeContract, "Only bridge can call");
        require(to != address(0), "Invalid recipient");
        
        // Mint or transfer tokens to the recipient
        _mint(to, amount);
        
        return true;
    }
    
    /**
     * @dev Override of the transfer function with security checks
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal override whenNotPaused {
        super._beforeTokenTransfer(from, to, amount);
        
        // Additional security checks could be implemented here
        // For example, rate limiting or additional verification for high security accounts
        if (accountSecurityLevel[from] >= 3) {
            // Additional checks for high security accounts
            // This would be implemented based on specific security requirements
        }
    }
}
