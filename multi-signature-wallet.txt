// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

/**
 * @title Life++ Multi-Signature Wallet
 * @dev Secure multi-signature wallet with quantum-resistant features
 */
contract LifePlusPlusMultiSigWallet is ReentrancyGuard {
    using ECDSA for bytes32;

    struct Transaction {
        address to;
        uint256 value;
        bytes data;
        bool executed;
        uint256 numConfirmations;
    }

    // Security level for quantum resistance
    enum SecurityLevel { Standard, Enhanced, Quantum }
    
    address[] public owners;
    mapping(address => bool) public isOwner;
    uint256 public numConfirmationsRequired;
    
    // Transactions
    Transaction[] public transactions;
    mapping(uint256 => mapping(address => bool)) public isConfirmed;
    
    // Security settings
    SecurityLevel public securityLevel;
    mapping(address => bytes) public quantum_public_keys;
    mapping(uint256 => mapping(address => bytes)) public quantum_signatures;
    
    // Events
    event SubmitTransaction(address indexed owner, uint256 indexed txIndex, address indexed to, uint256 value, bytes data);
    event ConfirmTransaction(address indexed owner, uint256 indexed txIndex);
    event RevokeConfirmation(address indexed owner, uint256 indexed txIndex);
    event ExecuteTransaction(address indexed owner, uint256 indexed txIndex);
    event SecurityLevelChanged(SecurityLevel newLevel);
    event QuantumPublicKeyUpdated(address indexed owner, bytes publicKey);
    event OwnerAdded(address indexed owner);
    event OwnerRemoved(address indexed owner);
    event RequirementChanged(uint256 required);

    modifier onlyOwner() {
        require(isOwner[msg.sender], "Not an owner");
        _;
    }

    modifier txExists(uint256 _txIndex) {
        require(_txIndex < transactions.length, "Tx does not exist");
        _;
    }

    modifier notExecuted(uint256 _txIndex) {
        require(!transactions[_txIndex].executed, "Tx already executed");
        _;
    }

    modifier notConfirmed(uint256 _txIndex) {
        require(!isConfirmed[_txIndex][msg.sender], "Tx already confirmed");
        _;
    }
    
    /**
     * @dev Constructor initializes the multi-signature wallet
     * @param _owners Array of owner addresses
     * @param _numConfirmationsRequired Number of confirmations required
     */
    constructor(address[] memory _owners, uint256 _numConfirmationsRequired) {
        require(_owners.length > 0, "Owners required");
        require(
            _numConfirmationsRequired > 0 && _numConfirmationsRequired <= _owners.length,
            "Invalid number of confirmations"
        );

        for (uint256 i = 0; i < _owners.length; i++) {
            address owner = _owners[i];

            require(owner != address(0), "Invalid owner");
            require(!isOwner[owner], "Owner not unique");

            isOwner[owner] = true;
            owners.push(owner);
        }

        numConfirmationsRequired = _numConfirmationsRequired;
        securityLevel = SecurityLevel.Standard;
    }
    
    /**
     * @dev Set security level for quantum resistance
     * @param _level New security level
     */
    function setSecurityLevel(SecurityLevel _level) public onlyOwner {
        require(uint8(_level) >= uint8(securityLevel), "Cannot downgrade security");
        
        if (_level == SecurityLevel.Quantum) {
            // Ensure all owners have quantum public keys
            for (uint256 i = 0; i < owners.length; i++) {
                require(quantum_public_keys[owners[i]].length > 0, "All owners need quantum keys");
            }
        }
        
        securityLevel = _level;
        emit SecurityLevelChanged(_level);
    }
    
    /**
     * @dev Set quantum-resistant public key for an owner
     * @param _publicKey Quantum-resistant public key
     */
    function setQuantumPublicKey(bytes calldata _publicKey) public onlyOwner {
        require(_publicKey.length > 0, "Invalid public key");
        quantum_public_keys[msg.sender] = _publicKey;
        emit QuantumPublicKeyUpdated(msg.sender, _publicKey);
    }
    
    /**
     * @dev Add a new owner
     * @param _owner New owner address
     */
    function addOwner(address _owner) public onlyOwner {
        require(_owner != address(0), "Invalid owner");
        require(!isOwner[_owner], "Owner already exists");
        
        isOwner[_owner] = true;
        owners.push(_owner);
        
        emit OwnerAdded(_owner);
    }
    
    /**
     * @dev Remove an existing owner
     * @param _owner Owner address to remove
     */
    function removeOwner(address _owner) public onlyOwner {
        require(isOwner[_owner], "Not an owner");
        require(owners.length > numConfirmationsRequired, "Cannot reduce below threshold");
        
        isOwner[_owner] = false;
        
        for (uint256 i = 0; i < owners.length; i++) {
            if (owners[i] == _owner) {
                owners[i] = owners[owners.length - 1];
                owners.pop();
                break;
            }
        }
        
        emit OwnerRemoved(_owner);
    }
    
    /**
     * @dev Change confirmation requirement
     * @param _required New required confirmations
     */
    function changeRequirement(uint256 _required) public onlyOwner {
        require(_required > 0 && _required <= owners.length, "Invalid requirement");
        numConfirmationsRequired = _required;
        emit RequirementChanged(_required);
    }
    
    /**
     * @dev Submit a new transaction
     * @param _to Destination address
     * @param _value ETH value
     * @param _data Transaction data
     * @return Transaction index
     */
    function submitTransaction(address _to, uint256 _value, bytes calldata _data)
        public
        onlyOwner
        returns (uint256)
    {
        uint256 txIndex = transactions.length;

        transactions.push(
            Transaction({
                to: _to,
                value: _value,
                data: _data,
                executed: false,
                numConfirmations: 0
            })
        );

        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);
        
        return txIndex;
    }
    
    /**
     * @dev Confirm a transaction
     * @param _txIndex Transaction index
     * @param _quantumSignature Optional quantum-resistant signature
     */
    function confirmTransaction(uint256 _txIndex, bytes calldata _quantumSignature)
        public
        onlyOwner
        txExists(_txIndex)
        notExecuted(_txIndex)
        notConfirmed(_txIndex)
    {
        // Check quantum signatures if in quantum security mode
        if (securityLevel == SecurityLevel.Quantum) {
            require(_quantumSignature.length > 0, "Quantum signature required");
            // In a real implementation, we would verify the quantum signature here
            quantum_signatures[_txIndex][msg.sender] = _quantumSignature;
        }
        
        Transaction storage transaction = transactions[_txIndex];
        transaction.numConfirmations += 1;
        isConfirmed[_txIndex][msg.sender] = true;

        emit ConfirmTransaction(msg.sender, _txIndex);
    }
    
    /**
     * @dev Execute a confirmed transaction
     * @param _txIndex Transaction index
     */
    function executeTransaction(uint256 _txIndex)
        public
        onlyOwner
        txExists(_txIndex)
        notExecuted(_txIndex)
        nonReentrant
    {
        Transaction storage transaction = transactions[_txIndex];

        require(
            transaction.numConfirmations >= numConfirmationsRequired,
            "Insufficient confirmations"
        );

        transaction.executed = true;

        (bool success, ) = transaction.to.call{value: transaction.value}(
            transaction.data
        );
        require(success, "Transaction failed");

        emit ExecuteTransaction(msg.sender, _txIndex);
    }
    
    /**
     * @dev Revoke a confirmation
     * @param _txIndex Transaction index
     */
    function revokeConfirmation(uint256 _txIndex)
        public
        onlyOwner
        txExists(_txIndex)
        notExecuted(_txIndex)
    {
        require(isConfirmed[_txIndex][msg.sender], "Tx not confirmed");

        Transaction storage transaction = transactions[_txIndex];
        transaction.numConfirmations -= 1;
        isConfirmed[_txIndex][msg.sender] = false;

        // Clear any quantum signatures
        quantum_signatures[_txIndex][msg.sender] = "";

        emit RevokeConfirmation(msg.sender, _txIndex);
    }
    
    /**
     * @dev Get list of owners
     * @return Array of owner addresses
     */
    function getOwners() public view returns (address[] memory) {
        return owners;
    }
    
    /**
     * @dev Get transaction count
     * @return Number of transactions
     */
    function getTransactionCount() public view returns (uint256) {
        return transactions.length;
    }
    
    /**
     * @dev Get transaction details
     * @param _txIndex Transaction index
     * @return Transaction details
     */
    function getTransaction(uint256 _txIndex)
        public
        view
        txExists(_txIndex)
        returns (
            address to,
            uint256 value,
            bytes memory data,
            bool executed,
            uint256 numConfirmations
        )
    {
        Transaction storage transaction = transactions[_txIndex];

        return (
            transaction.to,
            transaction.value,
            transaction.data,
            transaction.executed,
            transaction.numConfirmations
        );
    }
    
    /**
     * @dev Receive ETH
     */
    receive() external payable {}
}
