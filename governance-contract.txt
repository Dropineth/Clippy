// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/governance/Governor.sol";
import "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol";
import "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol";
import "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol";
import "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol";
import "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

/**
 * @title Life++ Governance
 * @dev Implementation of a governance mechanism for the Life++ ecosystem
 */
contract LifePlusPlusGovernance is 
    Governor, 
    GovernorSettings, 
    GovernorCountingSimple, 
    GovernorVotes, 
    GovernorVotesQuorumFraction, 
    GovernorTimelockControl,
    ReentrancyGuard 
{
    // Enhanced security parameters
    mapping(address => bool) public enhancedSecurityEnabled;
    mapping(uint256 => bytes) public proposalSecuritySignatures;
    
    // Cross-chain governance parameters
    mapping(uint256 => bool) public crossChainProposals;
    mapping(uint256 => uint256) public proposalOriginChain;
    
    // Events
    event EnhancedSecurityToggled(address indexed user, bool enabled);
    event ProposalSecuritySignatureAdded(uint256 indexed proposalId, bytes signature);
    event CrossChainProposalRegistered(uint256 indexed proposalId, uint256 originChain);

    /**
     * @dev Constructor initializes the governance contract
     * @param _token The ERC20Votes token used for governance
     * @param _timelock The timelock controller used for governance
     * @param _votingDelay The delay before voting on a proposal may begin
     * @param _votingPeriod The period during which votes can be cast
     * @param _proposalThreshold The number of votes required to create a proposal
     * @param _quorumPercentage The percentage of total supply that must participate for a vote to succeed
     */
    constructor(
        IVotes _token,
        TimelockController _timelock,
        uint256 _votingDelay,
        uint256 _votingPeriod,
        uint256 _proposalThreshold,
        uint256 _quorumPercentage
    )
        Governor("Life++ Governance")
        GovernorSettings(_votingDelay, _votingPeriod, _proposalThreshold)
        GovernorVotes(_token)
        GovernorVotesQuorumFraction(_quorumPercentage)
        GovernorTimelockControl(_timelock)
    {}
    
    /**
     * @dev Toggle enhanced security features for an address
     * @param enabled Whether to enable or disable enhanced security
     */
    function toggleEnhancedSecurity(bool enabled) public {
        enhancedSecurityEnabled[msg.sender] = enabled;
        emit EnhancedSecurityToggled(msg.sender, enabled);
    }
    
    /**
     * @dev Add a security signature for a proposal
     * @param proposalId The proposal ID
     * @param signature The security signature
     */
    function addProposalSecuritySignature(uint256 proposalId, bytes memory signature) public {
        require(state(proposalId) != ProposalState.Executed, "Proposal already executed");
        require(_msgSender() == proposer(proposalId), "Only proposer can add signature");
        require(signature.length > 0, "Invalid signature");
        
        proposalSecuritySignatures[proposalId] = signature;
        emit ProposalSecuritySignatureAdded(proposalId, signature);
    }
    
    /**
     * @dev Register a cross-chain proposal
     * @param proposalId The proposal ID
     * @param originChain The origin chain ID
     */
    function registerCrossChainProposal(uint256 proposalId, uint256 originChain) public onlyGovernance {
        require(originChain != block.chainid, "Cannot register from same chain");
        
        crossChainProposals[proposalId] = true;
        proposalOriginChain[proposalId] = originChain;
        
        emit CrossChainProposalRegistered(proposalId, originChain);
    }
    
    /**
     * @dev Extended propose function with enhanced security
     * @param targets Target addresses for proposal calls
     * @param values ETH values for proposal calls
     * @param calldatas Call data for proposal calls
     * @param description Description of the proposal
     * @param securitySignature Optional security signature
     * @return The ID of the newly created proposal
     */
    function proposeWithSecurity(
        address[] memory targets,
        uint256[] memory values,
        bytes[] memory calldatas,
        string memory description,
        bytes memory securitySignature
    ) public nonReentrant returns (uint256) {
        uint256 proposalId = propose(targets, values, calldatas, description);
        
        if (securitySignature.length > 0) {
            proposalSecuritySignatures[proposalId] = securitySignature;
            emit ProposalSecuritySignatureAdded(proposalId, securitySignature);
        }
        
        return proposalId;
    }
    
    // Required overrides

    function votingDelay()
        public
        view
        override(IGovernor, GovernorSettings)
        returns (uint256)
    {
        return super.votingDelay();
    }

    function votingPeriod()
        public
        view
        override(IGovernor, GovernorSettings)
        returns (uint256)
    {
        return super.votingPeriod();
    }

    function quorum(uint256 blockNumber)
        public
        view
        override(IGovernor, GovernorVotesQuorumFraction)
        returns (uint256)
    {
        return super.quorum(blockNumber);
    }

    function state(uint256 proposalId)
        public
        view
        override(Governor, GovernorTimelockControl)
        returns (ProposalState)
    {
        return super.state(proposalId);
    }

    function propose(
        address[] memory targets,
        uint256[] memory values,
        bytes[] memory calldatas,
        string memory description
    ) public override(Governor, IGovernor) returns (uint256) {
        return super.propose(targets, values, calldatas, description);
    }

    function proposalThreshold()
        public
        view
        override(Governor, GovernorSettings)
        returns (uint256)
    {
        return super.proposalThreshold();
    }

    function _execute(
        uint256 proposalId,
        address[] memory targets,
        uint256[] memory values,
        bytes[] memory calldatas,
        bytes32 descriptionHash
    ) internal override(Governor, GovernorTimelockControl) {
        super._execute(proposalId, targets, values, calldatas, descriptionHash);
    }

    function _cancel(
        address[] memory targets,
        uint256[] memory values,
        bytes[] memory calldatas,
        bytes32 descriptionHash
    ) internal override(Governor, GovernorTimelockControl) returns (uint256) {
        return super._cancel(targets, values, calldatas, descriptionHash);
    }

    function _executor()
        internal
        view
        override(Governor, GovernorTimelockControl)
        returns (address)
    {
        return super._executor();
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(Governor, GovernorTimelockControl)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
